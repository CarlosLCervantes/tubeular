require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VideosController do

  # This should return the minimal set of attributes required to create a valid
  # Video. As you add validations to Video, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString", "active" => true, 
    "uri" => "http://www.test.com/test.mp4" }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    @page_size = Settings.welcome.videos_page_size
    @number_of_videos = (@page_size * 3)
  end

  def setup_videos
    videos = @number_of_videos.times.collect do |i|
      view_count = i * 1000
      fav_count = i * 100
      rating = i.to_f + (i / 10).to_f
      create(:video, view_count: view_count,
      favorite_count: fav_count, rating: rating)
    end
  end

  describe "GET index" do
    it "assigns all videos as @videos" do
      videos = setup_videos
      get :index, {page: 0}, valid_session
      videos = videos.take(@page_size)
      assigns(:videos).should match_array(videos)
    end
  end

  describe "GET most_viewed" do
    it "assigns most viewed videos as @videos" do
      setup_videos
      videos = Video.order(view_count: :asc).limit(@page_size).all
      get :most_viewed, {}, valid_session
      #videos = videos.order(view_count: :asc).limit(@page_size)
      assigns(:videos).should eq(videos)
    end
  end

  describe "GET most_favorited" do
    it "assigns most favorited videos as @videos" do
      setup_videos
      videos = Video.order(favorite_count: :asc).limit(@page_size).all
      get :most_viewed, {}, valid_session
      #videos = videos.order(view_count: :asc).limit(@page_size)
      assigns(:videos).should eq(videos)
    end
  end

  describe "GET best_rated" do
    it "assigns best rated videos as @videos" do
      setup_videos
      videos = Video.order(rating: :asc).limit(@page_size).all
      get :most_viewed, {}, valid_session
      #videos = videos.order(view_count: :asc).limit(@page_size)
      assigns(:videos).should eq(videos)
    end
  end

  # describe "GET show" do
  #   it "assigns the requested video as @video" do
  #     video = Video.create! valid_attributes
  #     get :show, {:id => video.to_param}, valid_session
  #     assigns(:video).should eq(video)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new video as @video" do
  #     get :new, {}, valid_session
  #     assigns(:video).should be_a_new(Video)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested video as @video" do
  #     video = Video.create! valid_attributes
  #     get :edit, {:id => video.to_param}, valid_session
  #     assigns(:video).should eq(video)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Video" do
  #       expect {
  #         post :create, {:video => valid_attributes}, valid_session
  #       }.to change(Video, :count).by(1)
  #     end

  #     it "assigns a newly created video as @video" do
  #       post :create, {:video => valid_attributes}, valid_session
  #       assigns(:video).should be_a(Video)
  #       assigns(:video).should be_persisted
  #     end

  #     it "redirects to the created video" do
  #       post :create, {:video => valid_attributes}, valid_session
  #       response.should redirect_to(Video.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved video as @video" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Video.any_instance.stub(:save).and_return(false)
  #       post :create, {:video => {  }}, valid_session
  #       assigns(:video).should be_a_new(Video)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Video.any_instance.stub(:save).and_return(false)
  #       post :create, {:video => {  }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested video" do
  #       video = Video.create! valid_attributes
  #       # Assuming there are no other videos in the database, this
  #       # specifies that the Video created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       Video.any_instance.should_receive(:update).with({ "these" => "params" })
  #       put :update, {:id => video.to_param, :video => { "these" => "params" }}, valid_session
  #     end

  #     it "assigns the requested video as @video" do
  #       video = Video.create! valid_attributes
  #       put :update, {:id => video.to_param, :video => valid_attributes}, valid_session
  #       assigns(:video).should eq(video)
  #     end

  #     it "redirects to the video" do
  #       video = Video.create! valid_attributes
  #       put :update, {:id => video.to_param, :video => valid_attributes}, valid_session
  #       response.should redirect_to(video)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the video as @video" do
  #       video = Video.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Video.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => video.to_param, :video => {  }}, valid_session
  #       assigns(:video).should eq(video)
  #     end

  #     it "re-renders the 'edit' template" do
  #       video = Video.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Video.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => video.to_param, :video => {  }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested video" do
  #     video = Video.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => video.to_param}, valid_session
  #     }.to change(Video, :count).by(-1)
  #   end

  #   it "redirects to the videos list" do
  #     video = Video.create! valid_attributes
  #     delete :destroy, {:id => video.to_param}, valid_session
  #     response.should redirect_to(videos_url)
  #   end
  # end

end
