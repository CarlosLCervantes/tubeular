require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SuggestionsController do

  # This should return the minimal set of attributes required to create a valid
  # Suggestion. As you add validations to Suggestion, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "title" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SuggestionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all suggestions as @suggestions" do
      suggestion = Suggestion.create! valid_attributes
      get :index, {}, valid_session
      assigns(:suggestions).should eq([suggestion])
    end
  end

  describe "GET show" do
    it "assigns the requested suggestion as @suggestion" do
      suggestion = Suggestion.create! valid_attributes
      get :show, {:id => suggestion.to_param}, valid_session
      assigns(:suggestion).should eq(suggestion)
    end
  end

  describe "GET new" do
    it "assigns a new suggestion as @suggestion" do
      get :new, {}, valid_session
      assigns(:suggestion).should be_a_new(Suggestion)
    end
  end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Suggestion" do
  #       expect {
  #         post :create, {:suggestion => valid_attributes}, valid_session
  #       }.to change(Suggestion, :count).by(1)
  #     end

  #     it "assigns a newly created suggestion as @suggestion" do
  #       post :create, {:suggestion => valid_attributes}, valid_session
  #       assigns(:suggestion).should be_a(Suggestion)
  #       assigns(:suggestion).should be_persisted
  #     end

  #     it "redirects to the created suggestion" do
  #       post :create, {:suggestion => valid_attributes}, valid_session
  #       response.should redirect_to(Suggestion.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved suggestion as @suggestion" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Suggestion.any_instance.stub(:save).and_return(false)
  #       post :create, {:suggestion => { "title" => "invalid value" }}, valid_session
  #       assigns(:suggestion).should be_a_new(Suggestion)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Suggestion.any_instance.stub(:save).and_return(false)
  #       post :create, {:suggestion => { "title" => "invalid value" }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end
end
